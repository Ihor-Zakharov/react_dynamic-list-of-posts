{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","components/PostsList.tsx","components/UserSelector.tsx","components/NewCommentForm.tsx","components/PostDetails/PostDetailsContainer.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","selectedPost","handlePostSelect","userId","hidePostDetails","useState","posts","setPosts","isLoading","setIsLoading","error","setError","useEffect","fetchPosts","a","postsData","length","handleButtonClick","useCallback","isPostSelected","post","map","id","title","type","classNames","onClick","UserSelector","users","handleUserSelect","selectedUser","listOpened","setListOpened","ref","useRef","handleOpenListButtonClick","handleUsersOptionClick","user","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","role","name","href","formDefaultValue","email","NewCommentForm","postId","postCommentError","showNewComment","formValue","setFormValue","emptyName","emptyEmail","emptyBody","errors","setErrors","addButtonClicked","setAddButtonClicked","useMemo","prevState","handleInputChange","propertyName","value","handleClearButtonClick","handleFormSubmit","preventDefault","Object","values","some","addComment","comment","newComment","showEmptyNameError","showEmptyEmailError","showEmptyBodyError","onSubmit","htmlFor","placeholder","onChange","PostDetailsContainer","children","PostDetails","comments","setComments","showNewCommentForm","setShowNewCommentForm","fetchComments","commentsData","handleDeleteCommentButton","commentId","filter","handleWriteCommentButtonClick","commentBody","App","setUsers","setSelectedUser","setSelectedPost","fetchUsers","usersData","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.af7b5922.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { client } from '../utils/fetchClient';\n\ninterface Props {\n  handlePostSelect: (post: Post) => void;\n  selectedPost: Post | null;\n  userId: number;\n  hidePostDetails: () => void\n}\n\nexport const PostsList: React.FC<Props> = ({\n  selectedPost,\n  handlePostSelect,\n  userId,\n  hidePostDetails,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setIsLoading(true);\n\n        const postsData = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n        setPosts(postsData);\n      } catch {\n        setError(true);\n\n        if (!posts.length) {\n          setPosts([]);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, [userId]);\n\n  const handleButtonClick = useCallback((isPostSelected: boolean, post) => {\n    if (isPostSelected) {\n      hidePostDetails();\n    } else {\n      handlePostSelect(post);\n    }\n  }, []);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"PostsLoadingError\">\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!posts.length) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            const { id, title } = post;\n            const isPostSelected = post === selectedPost;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">{title}</td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': !isPostSelected,\n                    })}\n                    onClick={() => handleButtonClick(isPostSelected, post)}\n                  >\n                    {isPostSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[];\n  handleUserSelect: (user: User) => void;\n  selectedUser: User | null;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  handleUserSelect,\n  selectedUser,\n}) => {\n  const [listOpened, setListOpened] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const handleOpenListButtonClick = useCallback(() => {\n    setListOpened(true);\n  }, []);\n\n  const handleUsersOptionClick = useCallback((user: User) => {\n    setListOpened(false);\n    handleUserSelect(user);\n  }, [handleUserSelect]);\n\n  const handleClickOutside = useCallback((event: MouseEvent) => {\n    if (ref.current && !ref.current.contains(event.target as Node)) {\n      setListOpened(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': listOpened })}\n      ref={ref}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpenListButtonClick}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': selectedUser === user,\n                })}\n                onClick={() => handleUsersOptionClick(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nconst formDefaultValue: CommentData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\ninterface Props {\n  postId: number;\n  postCommentError: () => void;\n  showNewComment: (newComment: Comment) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  postCommentError,\n  showNewComment,\n}) => {\n  const [formValue, setFormValue] = useState<CommentData>(formDefaultValue);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    emptyName: true,\n    emptyEmail: true,\n    emptyBody: true,\n  });\n  const [addButtonClicked, setAddButtonClicked] = useState(false);\n\n  const { name, email, body } = useMemo(() => formValue, [formValue]);\n  const { emptyName, emptyEmail, emptyBody } = useMemo(() => errors, [errors]);\n\n  useEffect(() => {\n    if (name === formDefaultValue.name) {\n      setErrors((prevState) => ({ ...prevState, emptyName: true }));\n    } else {\n      setErrors((prevState) => ({ ...prevState, emptyName: false }));\n    }\n  }, [name, formDefaultValue.name]);\n\n  useEffect(() => {\n    if (email === formDefaultValue.email) {\n      setErrors((prevState) => ({ ...prevState, emptyEmail: true }));\n    } else {\n      setErrors((prevState) => ({ ...prevState, emptyEmail: false }));\n    }\n  }, [email, formDefaultValue.name]);\n\n  useEffect(() => {\n    if (body === formDefaultValue.body) {\n      setErrors((prevState) => ({ ...prevState, emptyBody: true }));\n    } else {\n      setErrors((prevState) => ({ ...prevState, emptyBody: false }));\n    }\n  }, [body, formDefaultValue.body]);\n\n  const handleInputChange = useCallback(\n    (\n      event:\n      | React.ChangeEvent<HTMLInputElement>\n      | React.ChangeEvent<HTMLTextAreaElement>,\n      propertyName: keyof CommentData,\n    ) => {\n      setFormValue((prevState) => ({\n        ...prevState,\n        [propertyName]: event.target.value,\n      }));\n\n      if (addButtonClicked) {\n        setAddButtonClicked(false);\n      }\n    },\n    [formValue, addButtonClicked],\n  );\n\n  const handleClearButtonClick = useCallback(() => {\n    setFormValue(formDefaultValue);\n    setAddButtonClicked(false);\n  }, []);\n\n  const handleFormSubmit = useCallback(\n    (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (Object.values(errors).some(error => error)) {\n        setAddButtonClicked(true);\n\n        return;\n      }\n\n      const addComment = async () => {\n        try {\n          setIsLoading(true);\n\n          const comment = {\n            ...formValue,\n            postId,\n          };\n\n          const newComment = await client.post<Comment>('/comments', comment);\n\n          showNewComment(newComment);\n\n          setFormValue((prevState) => ({ ...prevState, body: '' }));\n        } catch {\n          postCommentError();\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n      addComment();\n    },\n    [formValue, errors],\n  );\n\n  const showEmptyNameError = useMemo(\n    () => emptyName && addButtonClicked,\n    [emptyName, addButtonClicked],\n  );\n  const showEmptyEmailError = useMemo(\n    () => emptyEmail && addButtonClicked,\n    [emptyEmail, addButtonClicked],\n  );\n  const showEmptyBodyError = useMemo(\n    () => emptyBody && addButtonClicked,\n    [emptyBody, addButtonClicked],\n  );\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => handleFormSubmit(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': showEmptyNameError })}\n            value={name}\n            onChange={(event) => handleInputChange(event, 'name')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {showEmptyNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {showEmptyNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': showEmptyEmailError,\n            })}\n            value={email}\n            onChange={(event) => handleInputChange(event, 'email')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {showEmptyEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {showEmptyEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', { 'is-danger': showEmptyBodyError })}\n            value={body}\n            onChange={(event) => handleInputChange(event, 'body')}\n          />\n        </div>\n\n        {showEmptyBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearButtonClick}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","export const PostDetailsContainer: React.FC = ({ children }) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { client } from '../../utils/fetchClient';\nimport { PostDetailsContainer } from './PostDetailsContainer';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [showNewCommentForm, setShowNewCommentForm] = useState(false);\n\n  const { id, title, body } = useMemo(() => post, [post]);\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        setIsLoading(true);\n\n        const commentsData = await client.get<Comment[]>(\n          `/comments?postId=${id}`,\n        );\n\n        setComments(commentsData);\n      } catch {\n        setError(true);\n\n        if (comments.length) {\n          setComments([]);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchComments();\n\n    setShowNewCommentForm(false);\n  }, [post]);\n\n  const handleDeleteCommentButton = useCallback((commentId: number) => {\n    client.delete(`/comments/${commentId}`);\n\n    setComments((prevState) => prevState.filter((comment) => (\n      comment.id !== commentId\n    )));\n  }, []);\n\n  const handleWriteCommentButtonClick = useCallback(() => {\n    setShowNewCommentForm(true);\n  }, []);\n\n  const postCommentError = useCallback(() => {\n    setError(true);\n  }, []);\n\n  const showNewComment = useCallback(\n    (newComment: Comment) => {\n      setComments((prevState) => [...prevState, newComment]);\n    },\n    [comments],\n  );\n\n  if (isLoading) {\n    return (\n      <PostDetailsContainer>\n        <h2 data-cy=\"PostTitle\">{`#${id}: ${title}`}</h2>\n\n        <p data-cy=\"PostBody\">{body}</p>\n        <Loader />\n      </PostDetailsContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <PostDetailsContainer>\n        <h2 data-cy=\"PostTitle\">{`#${id}: ${title}`}</h2>\n\n        <p data-cy=\"PostBody\">{body}</p>\n\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      </PostDetailsContainer>\n    );\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${id}: ${title}`}</h2>\n\n          <p data-cy=\"PostBody\">{body}</p>\n        </div>\n\n        <div className=\"block\">\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map((comment) => {\n                const {\n                  id: commentId,\n                  name,\n                  body: commentBody,\n                  email,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={commentId}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteCommentButton(commentId)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {commentBody}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {!showNewCommentForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteCommentButtonClick}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {showNewCommentForm && (\n          <NewCommentForm\n            postId={id}\n            postCommentError={postCommentError}\n            showNewComment={showNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { UserSelector } from './components/UserSelector';\n\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\nimport { PostDetails } from './components/PostDetails/PostDetails';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const usersData = await client.get<User[]>('/users');\n\n        setUsers(usersData);\n      } catch {\n        if (users.length) {\n          setUsers([]);\n        }\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleUserSelect = useCallback((user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(null);\n  }, []);\n\n  const handlePostSelect = useCallback((post: Post) => {\n    setSelectedPost(post);\n  }, []);\n\n  const hidePostDetails = useCallback(() => {\n    setSelectedPost(null);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  handleUserSelect={handleUserSelect}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser ? (\n                  <p data-cy=\"NoSelectedUser\"> No user selected </p>\n                ) : (\n                  <PostsList\n                    handlePostSelect={handlePostSelect}\n                    selectedPost={selectedPost}\n                    userId={selectedUser.id}\n                    hidePostDetails={hidePostDetails}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}